<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<!-- Time-stamp: <03/10/07 15:50:35 ptr> -->

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <link rel="stylesheet" type="text/css" href="main.css" media="screen" title="general">
    <link rel="stylesheet" type="text/css" href="decor.css" media="screen" title="general">
    <link rel="stylesheet" type="text/css" href="float.css" media="screen" title="general">
    <title>Complement: Anti-autotools</title>
  </head>

  <body>
<!--#include file="head-tech.shtml" -->
<div class="toppic">
<img src="img/jpg/apropos.jpg">
</div>
<div class="main">
    <h2 class="lheader">Why I hate autotools</h2>
    <dl>
     <dt>Myth 1. Autotools isolate programmer from platform software.</dt>
    <dd>
    Do you ever try to build some real project with autotools (with ./configure)
    with some compiler different from gcc? I do. I spent much more time to
    say what compiler name I need, what options I need, what options I don't
    to see, etc. etc. then for code portability itself! I.e. I spent more
    time to boring tools that was intended for screen portabilty problems.<br>

    This problem even worse. Autotools incompatible between versions of autotools.
    When automake installed on you system too old for one project, it too new
    for another. It's a big luck when only warning happens.
    </dd>

    <dt>Myth 2. Autotools help to write portable code.</dt>

    <dd>
    The case when platform A has function with name foo, platform B has function with
    name boo, that implement the same paradigm as foo on platform A. Programmer
    should worry about paradigm difference youself, autotools can't help too much here.
    Really I can say: 'my code work on platform A' only if I at least compile
    it for platform A. Or at least check the difference between platform A and platform
    B, if I know what happens on platform B. Autotools don't magically provide
    workarounds for platform A. I, as programmer, should know about platform A speciality, and should
    worry about it.
    </dd>

    <dt>Myth 3. Autotools provide easy-to-use build system.</dt>
    <dd> Well, while you use autotools only to build projects:

<pre class="ddisplay">
./configure && make && make install
</pre>

     all fine and you happy. Nice! But if you developer, not all so good:
<pre class="ddisplay">
autoreconf
...
./configure
...
make
...
Boom!
make clean
...
Boom!
make distclean
...
autoreconf
...
automake
...
./configure
...
make
</pre>
     Hmm, I should pass <tt>-DUSE_FEATURE_BOO=2</tt> for program <tt>boo</tt>!
<pre class="ddisplay">
make distclean; autoreconf && automake && ./configure && make
</pre>
     Ufff...<br>

     It very annoying, especially if I know that all this job may be done
     within make tool only, without other bloated scripts.<br>

     What about this checks:
<pre class="ddisplay">
checking for g77... no
checking for f77... no
checking for xlf... no
checking for frt... no
checking for pgf77... no
checking for cf77... no
checking for fort77... no
checking for fl32... no
checking for af77... no
checking for f90... no
checking for xlf90... no
checking for pgf90... no
checking for pghpf... no
checking for epcf90... no
checking for gfortran... no
checking for g95... no
checking for f95... no
checking for fort... no
checking for xlf95... no
checking for ifort... no
checking for ifc... no
checking for efc... no
checking for pgf95... no
checking for lf95... no
checking for ftn... no
checking whether we are using the GNU Fortran 77 compiler... no
</pre>
     when I have no fortran code? Note, that this check may be not only annoying,
     but block build on insignificant check.
     </dd>
     </dl>

     Yet another. What you think about pollution by generated file (.o, .la, ...)
     in the same place where you source files situated? Can you hide this intermediate
     results someware else? I can. Autotools can't. Only with libtool, that
     block cross-compilation (it finding native libraries, instead of cross).

     <h2 class="lheader">What instead?</h2>

     <p>
     First, let's say that informing about and passing specific configuration options 'configure'
     do well. But this not require shell script 700K in size.
     </p>

     <p>
     Then, we can see that 'make' and friends is very power tool. Just let's allow
     do it job well!
     </p>

     <p>
     You have 'common' flow, i.e. compile object files from C source, link the set of
     object files into executable or shared object. And, sometimes, you need original
     operations, like generation of C file from some meta-language with some
     tool. Build system provide easy suggestion for common tasks, and allow you
     do original builds as you want. I.e. build system may worry about transformation
     from file.cc to file.o to file.so, take into account dependency and generate
     TAGS for emacs. If you don't want here something else, of cause.
     </p>

     <p>
     As simplest example, I use two files to build <b>xmt</b> library on a wide set of
     platforms:
     </p>
<pre class="ddisplay">
# -*- Makefile -*- Time-stamp: <06/11/10 16:23:01 ptr>

SRCROOT := ../..

include Makefile.inc
include ${SRCROOT}/Makefiles/top.mak

INCLUDES += -I$(SRCROOT)/include
</pre>
     <p>
     and <tt>Makefile.inc</tt>
     </p>
<pre class="ddisplay">
# -*- Makefile -*- Time-stamp: <06/11/29 01:59:50 ptr>

LIBNAME = xmt
MAJOR = 1
MINOR = 9
PATCH = 3
SRC_CC = xmt.cc thr_mgr.cc time.cc uid.cc
SRC_C = fl.c
</pre>
     <p>
     Really first file vary for different compilers (and very different for
     Redmond's nmake) but the second (<tt>Makefile.inc</tt>) is one for all.
     </p>
</div>
<!--#include file="foot.shtml" -->
<!-- Created: Mon Oct  7 16:33:17 MSD 2002 -->
  </body>
</html>

