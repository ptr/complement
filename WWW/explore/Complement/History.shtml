<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<!-- Time-stamp: <03/05/04 20:42:31 ptr> -->
<!-- $Id$ -->

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <link rel="stylesheet" type="text/css" href="main.css" media="screen" title="general">
    <link rel="stylesheet" type="text/css" href="decor.css" media="screen" title="general">
    <link rel="stylesheet" type="text/css" href="float.css" media="screen" title="general">
    <title>Complement: History</title>
  </head>

  <body>
<!--#include file="head.shtml" -->
<div class="toppic">
<img src="img/jpg/history.jpg">
</div>
<div class="main">
    <!-- <h2 class="lheader">History</h2> -->

<h2 class="lheader">OXW (EDS R1)</h2>

<p>
Evereone programmer at some stage tried to write own Window system,
that better then others.
I am too. Beginning to programm for Unix I wasn't satisfied by existing
at this moment X Window toolkits, and start write own system.
</p>

<p>
I came from Windows, and I was very impressed by Borland's
OWL C++ library. So, I made attempt to build on Solaris the same
functionality for X Window. This pride aim was established only
partially, and the result was Object X Window library (OXW).
</p>

<h2 class="lheader">EDS R2</h2>

<p>
I found that idea of Event-based programming technique useful
not only for conrol Window(s) objects. Programming model based
on events very good for isolation of parts (modules) of complex
system, and allow convinent way to build system skeleton.
</p>

<p>
Controlling via events is a best solution when
the system should response on many external actions, while
behavior of system depends from ones state (that vary with time).
</p>

<p>
This facts lead to I drop dependence from X Window.
Ideas of 'handlers' and object states stack was implemented.
To improve asynchronous processing I incorporated threads.
Due to problem of portabilty threads-support code was
separated into xmt library.
</p>

<h2 class="lheader">EDS R3</h2>

<p>
The work under socket libray with C++ iostreams-like interface was
finished, and one was used for communication with remote EDS systems.
Processig of internal (inside one process) events traffic
was separated from external traffic.
</p>

<p>
All libs became portable: system with EDS usage was built for Windows,
Solaris (SPARC and x86), Linux and HP-UX.
</p>

<p>
Now project became really public under the name 'complement'
on <a href="http://sourceforge.net">SourceForge</a>.
</p>

<h2 class="lheader">Complement</h2>

<p>
I'm discover that components of project has own value, and provide good vertical
structure. Project was splitted into few sub-projects: multi-threading and related
inter-process communication (xmt), network communication (sockios) and event-driven
state machine (StEM). See <a href="index.shtml">Complement project homepage</a>.
</p>

</div>
<!--#include file="foot.shtml" -->
<!-- Created: Thu Nov 28 14:57:17 MSD 2002 -->
  </body>
</html>
