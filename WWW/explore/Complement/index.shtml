<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<!-- Time-stamp: <06/08/30 00:05:40 ptr> -->
<!-- $Id$ -->

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <link rel="stylesheet" type="text/css" href="main.css" media="screen" title="general">
    <link rel="stylesheet" type="text/css" href="decor.css" media="screen" title="general">
    <link rel="stylesheet" type="text/css" href="float.css" media="screen" title="general">
    <meta name="keywords" content="C++, STLport, portable, threads, multithreads, event, stream, IO, library, socket, ISO/IEC 14882, standard, Unix, Linux, Solaris, HP-UX, Windows">
    <title>Complement C++ libraries</title>
  </head>

  <body>
<!--#include file="head.shtml" -->
<div class="toppic">
<img src="img/jpg/login.jpg">
</div>
<div class="main">
    <p>
      Complement is a set of C++ libraries.
      This libraries provide multiplatform C++ framework
      for
    </p>
    <ul>
      <li>multithreaded programming,
      </li>
      <li>sockets programming,
      </li>
      <li>communication programming.
      </li>
    </ul>
    </p>

    <h2 class="lheader">Brief Description</h2>

    <dl>
      <dt>xmt</dt>
      <dd>
        Portable programming interface to build MultiThreaded (MT)
        applications or libraries. Hide platform-specific 
        system calls that used for MT-programming. Provide generic
        C++ interfaces for MT programming. Close to POSIX threading
        model.
      </dd>
      <dt>sockios</dt>
      <dd>
        Generic interface for interprocess communication via sockets.
        Sockios programming interface unified with C++ standard (ISO/IEC 14882)
        IO streams interface. Provide easy and evident (for C++ programmer,
        who understand STL) interface for TCP sockets: framework both for client
        and server parts. Generic server implemented with use of <b>xmt</b> library.
      </dd>
      <dt>StEM</dt>
      <dd>
        StEM is a C++ framework to build application as finite state,
        event-driven machine. Machine correspond to set of independent objects,
        each with own state and state history, that may interact via events.
        Objects may be situated in different processes (that may be running on different
        hosts, connected via TCP network). Framework use asynchronous events delivery
        and processing.<br><br>

        Every node (object) has a stack of states and may react on incoming
        events (depends upon event processing handlers, state and states history).
        Behaviour of object may vary during it's life time (via change of it state).<br><br>

        StEM follow code reuse principles: it use <b>xmt</b> and <b>sockios</b> internal
        and external communication.<br><br>

        In contrast to similar frameworks,
        to build application based on StEM framework, you need only C++ compiler.
      </dd>
    </dl>

    <h2 class="lheader">Present State of Complement Project</h2>

    <p>
      Since 1996 few projects was implemented with this libraries (it's not frozen, it under development).
      See <a href="Requirements.shtml">Requirements</a>.
    </p>
</div>

<!--#include file="foot.shtml" -->
<!-- Created: Thu Sep 12 11:00:09 MSD 2002 -->
  </body>
</html>
