#!/bin/sh

# Time-stamp: <07/06/08 23:24:03 ptr>

configmak=Makefiles/gmake/config.mak

# rm -f ${configmak}

# echo "# STLPORT_DIR := /export/home/windows/guest/STLlab/STLport" >> ${configmak}
# echo "# MSVC_DIR := c:/Program Files/Microsoft Visual Studio/VC98" >> ${configmak}
# echo "# TARGET_PROC=x86" >> ${configmak}

write_option() {
  target=`echo $1 | sed -e 's/^[^=]*=//'`
  echo $2 := $target >> ${configmak}
}

print_help() {
  cat <<EOF
Configuration utility.

Usage:

  configure [options]

Available options:

  --target=<target>     target platform (cross-compiling)
  --help                print this help message and exit
  --with-stlport=<dir>  use STLport in catalog <dir>
  --without-stlport     compile without STLport (default)
  --with-boost=<dir>    use boost headers in catalog <dir>
  --with-system-boost   use boost installed on this system
  --with-msvc=<dir>     use MS VC from this catalog
  --with-mssdk=<dir>    use MS SDK from this catalog
  --with-extra-cxxflags=<options>
                        pass extra options to C++ compiler
  --use-static-gcc      use static gcc libs instead of shared libgcc_s (useful for gcc compiler,
                        that was builded with --enable-shared [default]; if compiler was builded
                        with --disable-shared, static libraries will be used in any case)
  --clean               remove custom settings (file ${configmak})
                        and use default values
  --with-cxx=<name>     use <name> as C++ compiler (use --target= for cross-compilation)
  --with-cc=<name>      use <name> as C compiler (use --target= for cross-compilation)
  --use-compiler-family=<name> use compiler family; one of:
                        gcc      GNU compilers (default)
                        icc      Intel compilers
                        aCC      HP's aCC compilers
                        CC       SunPro's CC compilers
  --without-debug       don't build debug variant
  --without-stldebug    don't build STLport's STLP_DEBUG mode
  --enable-static       build static
  --disable-shared      don't build shared 

EOF
}

default_settings () {
  # if [ "$boost_set" = "" ]; then
  #   write_option "${PWD}/external/boost" BOOST_DIR
  # fi

  if [ "$stlport_set" = "" ]; then
    # write_option "${PWD}/external/STLport" STLPORT_DIR
    write_option "1" WITHOUT_STLPORT
  fi
  # write_option "${PWD}/build/" BASE_INSTALL_DIR
  if [ "$compiler_family_set" = "" ]; then
    write_option gcc COMPILER_NAME
  fi
}

case $# in
  0)
    if [ ! -f ${configmak} ]; then
      default_settings
    fi
    exit 0
    ;;
esac

for a in $@ ; do
  case $a in
    --help)
      print_help
      exit 0
      ;;
    --clean)
      rm -f ${configmak}
      exit 0
      ;;
  esac
done

rm -f ${configmak}
touch ${configmak}

while :
do
  case $# in
    0)
      break
      ;;
  esac
  option="$1"
  shift
  case $option in
    --target=*)
      write_option "$option" TARGET_OS
      target_set=y
      ;;
    --with-stlport=*)
      write_option "$option" STLPORT_DIR
      stlport_set=y
      ;;
    --without-stlport)
      write_option "1" WITHOUT_STLPORT
      stlport_set=y
      ;;
    --with-boost=*)
      write_option "$option" BOOST_DIR
      ;;
    --with-system-boost)
      write_option "1" USE_SYSTEM_BOOST
      ;;
    --with-msvc=*)
      write_option "$option" MSVC_DIR
      ;;
    --with-mssdk=*)
      write_option "$option" MSSDK_DIR
      ;;
    --with-extra-cxxflags=*)
      write_option "$option" EXTRA_CXXFLAGS
      cxxflags_set=y
      ;;
    --use-static-gcc)
      write_option "1" USE_STATIC_LIBGCC
      ;;
    --without-debug)
      write_option "1" _NO_DBG_BUILD
      ;;
    --without-stldebug)
      write_option "1" _NO_STLDBG_BUILD
      ;;
    --enable-static)
      write_option "1" _STATIC_BUILD
      ;;
    --disable-shared)
      write_option "1" _NO_SHARED_BUILD
      ;;
    --with-cxx=*)
      write_option "$option" _FORCE_CXX
      cxx_set=y
      ;;
    --with-cc=*)
      write_option "$option" _FORCE_CC
      cc_set=y
      ;;
    --use-compiler-family=*)
      case `echo $option | sed -e 's/^[^=]*=//'` in
        gcc|icc|aCC|CC)
          write_option "$option" COMPILER_NAME
          ;;
        *)
          echo "Not supported compilers family"
          exit -1
          ;;
      esac
      compiler_family_set=y
      ;;
  esac
done

if [ "$CXX" != "" ]; then
  if [ "$target_set" != "" ]; then
    echo "For cross-compilation with gcc use --target option only"
  else
    write_option "$CXX" _FORCE_CXX
  fi
  if [ "$cxx_set" != "" ]; then
    echo "Both --with-cxx and \$CXX set, using the first"
  fi
  if [ "$CC" = "" ] && [ "$cc_set" = "" ]; then
    echo "\$CXX set, but I don't see \$CC!"
  fi
fi

if [ "$CC" != "" ]; then
  if [ "$cxx_set" != "" ]; then
    echo "Both --with-cc and \$CC set, using the first"
  fi
fi

if [ "$CXXFLAGS" != "" ]; then
  if [ "$cxxflags_set" = "" ]; then
    write_option "$CXXFLAGS" EXTRA_CXXFLAGS
  else
    echo "Both --with-extra-cxxflags and \$CXXFLAGS set, using the first"
  fi
fi

# default settings

default_settings
