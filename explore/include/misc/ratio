// -*- C++ -*- Time-stamp: <09/08/14 10:05:01 ptr>

/*
 * Copyright (c) 2009
 * Petr Ovtchenkov
 *
 * Licensed under the Academic Free License version 3.0
 *
 * See JTC1/SC22/WG21 working draft
 * [http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2914.pdf]
 */

#ifndef __MISC_RATIO
#define __MISC_RATIO

#ifndef __config_feature_h
#include <config/feature.h>
#endif

#include <cstdint>

#if !defined(STLPORT) || (_STLPORT_VERSION < 0x520)

// libstdc++ v3, timestamp 20050519 (3.4.4) has __type_traits,
// libstdc++ v3, timestamp 20060306 (3.4.6) has __type_traits,
// while libstdc++ v3, 20050921 (4.0.2) not; use libstdc++ instead
# if defined(STLPORT) || (defined(__GNUC__) && (__GNUC__ < 4) ) /* !defined(__GLIBCXX__) || (defined(__GNUC__) && (__GNUC__ < 4)) */
#  include <misc/type_traits.h>
# elif defined(__GNUC__) && ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 3))
#  include <type_traits>
namespace std::tr1 = std;
# endif
#else // STLPORT
# include <type_traits>
#endif


namespace std {

template <intmax_t N, intmax_t D = 1LL> class ratio;

// ratio arithmetic

template <class R1, class R2> struct ratio_add;
template <class R1, class R2> struct ratio_subtract;
template <class R1, class R2> struct ratio_multiply;
template <class R1, class R2> struct ratio_divide;

// ratio comparison

template <class R1, class R2> struct ratio_equal;
template <class R1, class R2> struct ratio_not_equal;
template <class R1, class R2> struct ratio_less;
template <class R1, class R2> struct ratio_less_equal;
template <class R1, class R2> struct ratio_greater;
template <class R1, class R2> struct ratio_greater_equal;

// convenience SI typedefs

// typedef ratio<1LL, 1000000000000000000000000LL> yocto; // see 20.4.4
// typedef ratio<1LL, 1000000000000000000000LL> zepto; // see 20.4.4
typedef ratio<1LL, 1000000000000000000LL> atto;
typedef ratio<1LL,    1000000000000000LL> femto;
typedef ratio<1LL,       1000000000000LL> pico;
typedef ratio<1LL,          1000000000LL> nano;
typedef ratio<1LL,             1000000LL> micro;
typedef ratio<1LL,                1000LL> milli;
typedef ratio<1LL,                 100LL> centi;
typedef ratio<1LL,                  10LL> deci;
typedef ratio<10LL,                  1LL> deca;
typedef ratio<100LL,                 1LL> hecto;
typedef ratio<1000LL,                1LL> kilo;
typedef ratio<1000000LL,             1LL> mega;
typedef ratio<1000000000LL,          1LL> giga;
typedef ratio<1000000000000LL,       1LL> tera;
typedef ratio<1000000000000000LL,    1LL> peta;
typedef ratio<1000000000000000000LL, 1LL> exa;
// typedef ratio<1000000000000000000000LL, 1LL> zetta; // see 20.4.4
// typedef ratio<1000000000000000000000000LL, 1LL> yotta; // see 20.4.4

} // namespace std

namespace std {

namespace detail {

template <intmax_t R>
struct __select_sign :
    public std::tr1::integral_constant<intmax_t,(R>=0) ? 1LL : -1LL>
{
};

template <intmax_t R>
struct __select_abs :
    public std::tr1::integral_constant<intmax_t,(R>=0) ? R : -R>
{
};

template <intmax_t U, intmax_t V>
struct __gcd :
    public std::tr1::integral_constant<intmax_t,__gcd<__select_abs<V>::value,__select_abs<U>::value % __select_abs<V>::value>::value>
{
};

template <intmax_t U>
struct __gcd<U, 0LL> :
    public std::tr1::integral_constant<intmax_t,__select_abs<U>::value>
{
};

} // namespace detail

template <intmax_t N, intmax_t D>
class ratio
{
  public:
    static const intmax_t num = std::detail::__select_sign<D>::value * N / std::detail::__gcd<N,D>::value;
    static const intmax_t den = std::detail::__select_abs<D>::value / std::detail::__gcd<N,D>::value;
};

template <class R1, class R2>
struct ratio_add // ratio<R1::num * R2::den + R2::num * R1::den, R1::den * R2::den>
{
    typedef std::ratio<R1::num * (R2::den/std::detail::__gcd<R1::den,R2::den>::value) + R2::num * (R1::den/std::detail::__gcd<R1::den,R2::den>::value), R1::den * (R2::den/std::detail::__gcd<R1::den,R2::den>::value)> type;
};

template <class R1, class R2>
struct ratio_subtract // ratio<R1::num * R2::den - R2::num * R1::den, R1::den * R2::den>
{
    typedef std::ratio<R1::num * (R2::den/std::detail::__gcd<R1::den,R2::den>::value) - R2::num * (R1::den/std::detail::__gcd<R1::den,R2::den>::value), R1::den * (R2::den/std::detail::__gcd<R1::den,R2::den>::value)> type;
};

template <class R1, class R2>
struct ratio_multiply // ratio<R1::num * R2::num, R1::den * R2::den>
{
    typedef std::ratio<(R1::num/std::detail::__gcd<R1::num,R2::den>::value)*(R2::num/std::detail::__gcd<R2::num,R1::den>::value),(R1::den/std::detail::__gcd<R2::num,R1::den>::value) * (R2::den/std::detail::__gcd<R1::num,R2::den>::value)> type;
};

template <class R1, class R2>
struct ratio_divide // ratio<R1::num * R2::den, R2::num * R1::den>
{
    typedef std::ratio<(R1::num/std::detail::__gcd<R1::num,R2::num>::value) * (R2::den/std::detail::__gcd<R2::den,R1::den>::value),(R2::num/std::detail::__gcd<R1::num,R2::num>::value) * (R1::den/std::detail::__gcd<R2::den,R1::den>::value)> type;
};

template <class R1, class R2>
struct ratio_equal :
    public tr1::integral_constant<bool, (R1::num == R2::num) && (R1::den == R2::den)>
{
};

template <class R1, class R2>
struct ratio_not_equal :
    public tr1::integral_constant<bool, !ratio_equal<R1, R2>::value>
{
};

template <class R1, class R2>
struct ratio_less :
    // public tr1::integral_constant<bool, (R1::num * R2::den) < (R2::num * R1::den)>
    public tr1::integral_constant<bool, (ratio_divide<R1,R2>::type::num < ratio_divide<R1,R2>::type::den)>
{
};

template <class R1, class R2>
struct ratio_less_equal :
    public tr1::integral_constant<bool, !ratio_less<R2, R1>::value>
{
};

template <class R1, class R2>
struct ratio_greater :
    public tr1::integral_constant<bool, ratio_less<R2, R1>::value>
{
};

template <class R1, class R2>
struct ratio_greater_equal :
    public tr1::integral_constant<bool, !ratio_less<R1, R2>::value>
{
};

} // namespace std

#endif // __MISC_RATIO
