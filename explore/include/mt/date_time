// -*- C++ -*- Time-stamp: <2011-03-23 16:28:58 ptr>

/*
 * Copyright (c) 2002, 2006-2008
 * Petr Ovtchenkov
 *
 * Licensed under the Academic Free License version 3.0
 *
 * Derived from original <mt/time.h> of 'complement' project
 * [http://complement.sourceforge.net]
 * to make it close to JTC1/SC22/WG21 working draft
 * [http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2497.html]
 */

#ifndef __MT_DATE_TIME
#define __MT_DATE_TIME

#ifndef __config_feature_h
#include <config/feature.h>
#endif

#include <string>
#include <misc/type_traits.h>
#include <functional>

namespace std {

namespace tr2 {

class system_time;
class nanoseconds;
class microseconds;
class milliseconds;
class seconds;
class minutes;
class hours;

namespace detail {

typedef long long signed_tick_type; // int64_t
typedef unsigned long long unsigned_tick_type; // uint64_t

template <class _Tp1, class _Tp2>
struct __is_more_precise :
    public std::false_type
{
  typedef _Tp2 finest_type;
};

template <class _Tp>
struct __is_more_precise<std::tr2::nanoseconds,_Tp> :
    public std::true_type
{
  typedef std::tr2::nanoseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::microseconds,milliseconds> :
    public std::true_type
{
  typedef std::tr2::microseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::microseconds,seconds> :
    public std::true_type
{
  typedef std::tr2::microseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::microseconds,minutes> :
    public std::true_type
{
  typedef std::tr2::microseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::microseconds,hours> :
    public std::true_type
{
  typedef std::tr2::microseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::milliseconds,seconds> :
    public std::true_type
{
  typedef std::tr2::milliseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::milliseconds,minutes> :
    public std::true_type
{
  typedef std::tr2::milliseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::milliseconds,hours> :
    public std::true_type
{
  typedef std::tr2::milliseconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::seconds,minutes> :
    public std::true_type
{
  typedef std::tr2::seconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::seconds,hours> :
    public std::true_type
{
  typedef std::tr2::seconds finest_type;
};

template <>
struct __is_more_precise<std::tr2::minutes,hours> :
    public std::true_type
{
  typedef std::tr2::minutes finest_type;
};

template <class LhsDuration, class RhsDuration, class Op, bool Pre>
struct __op_aux
{
  bool operator()( const LhsDuration& lhs, const RhsDuration& rhs ) const
    { return Op()( static_cast<RhsDuration>(lhs).count(), rhs.count()); }
};

template <class LhsDuration, class RhsDuration, class Op>
struct __op_aux<LhsDuration,RhsDuration,Op,true>
{
  bool operator()( const LhsDuration& lhs, const RhsDuration& rhs ) const
    { return Op()(lhs.count(), static_cast<LhsDuration>(rhs).count() ); }
};

template <class LhsDuration, class RhsDuration, class Op, bool Pre>
struct __op_aux2
{
  signed_tick_type operator()( const LhsDuration& lhs, const RhsDuration& rhs ) const
    { return Op()( static_cast<RhsDuration>(lhs).count(), rhs.count()); }
};

template <class LhsDuration, class RhsDuration, class Op>
struct __op_aux2<LhsDuration,RhsDuration,Op,true>
{
  signed_tick_type operator()( const LhsDuration& lhs, const RhsDuration& rhs ) const
    { return Op()(lhs.count(), static_cast<LhsDuration>(rhs).count() ); }
};

struct add :
  public std::binary_function<signed_tick_type,signed_tick_type,signed_tick_type>
{
  signed_tick_type operator()(signed_tick_type __x, signed_tick_type __y) const
    { return __x + __y; }
};

struct sub :
   public std::binary_function<signed_tick_type,signed_tick_type,signed_tick_type>
{
  signed_tick_type operator()(signed_tick_type __x, signed_tick_type __y) const
    { return __x - __y; }
};

} // namespace detail

class nanoseconds
{
  public:
    typedef std::tr2::detail::signed_tick_type tick_type;

    static const tick_type ticks_per_second;
    static const tick_type seconds_per_tick;
    static const bool is_subsecond;

    nanoseconds( long long ns = 0LL ) :
        tv( ns )
      { }

    tick_type count() const
      { return tv; }

    template <typename Duration>
    nanoseconds& operator -=( const Duration& d )
      {
        static const tick_type factor = Duration::is_subsecond ? nanoseconds::ticks_per_second / Duration::ticks_per_second : nanoseconds::ticks_per_second * Duration::seconds_per_tick;

        tv -= d.tv * factor;
        return *this;
      }

    template <typename Duration>
    nanoseconds& operator +=( const Duration& d )
      {
        static const tick_type factor = Duration::is_subsecond ? nanoseconds::ticks_per_second / Duration::ticks_per_second : nanoseconds::ticks_per_second * Duration::seconds_per_tick;

        tv += d.tv * factor;
        return *this;                                                                            
      }

    nanoseconds& operator *=( long v )
      {
         tv *= v;
         return *this;
      }

    nanoseconds& operator /=( long v )
      {
         tv /= v;
         return *this;
      }

    nanoseconds operator -() const
      { return nanoseconds( -tv ); }

    bool operator ==( const nanoseconds& r ) const
      { return tv == r.tv; }

    template <class Duration>
    bool operator ==( const Duration& r ) const
      { return tv == static_cast<nanoseconds>(r).count(); }

    bool operator !=( const nanoseconds& r ) const
      { return tv != r.tv; }

    template <class Duration>
    bool operator !=( const Duration& r ) const
      { return tv != static_cast<nanoseconds>(r).count(); }

    bool operator <( const nanoseconds& r ) const
      { return tv < r.tv; }

    template <class Duration>
    bool operator <( const Duration& r ) const
      { return tv < static_cast<nanoseconds>(r).count(); }

    bool operator <=( const nanoseconds& r ) const
      { return tv <= r.tv; }

    template <class Duration>
    bool operator <=( const Duration& r ) const
      { return tv <= static_cast<nanoseconds>(r).count(); }

    bool operator >( const nanoseconds& r ) const
      { return tv > r.tv; }

    template <class Duration>
    bool operator >( const Duration& r ) const
      { return tv > static_cast<nanoseconds>(r).count(); }

    bool operator >=( const nanoseconds& r ) const
      { return tv >= r.tv; }

    template <class Duration>
    bool operator >=( const Duration& r ) const
      { return tv >= static_cast<nanoseconds>(r).count(); }

    nanoseconds operator +( const nanoseconds& r ) const
      { return nanoseconds( tv + r.tv ); }

    system_time operator +( const system_time& r ) const;

    template <class Duration>
    nanoseconds operator +(const Duration& r) const
      { return nanoseconds( tv + static_cast<nanoseconds>(r).count() ); }

    nanoseconds operator -( const nanoseconds& r ) const
      { return nanoseconds( tv - r.tv ); }

    template <class Duration>
    nanoseconds operator -(const Duration& r) const
      { return nanoseconds( tv - static_cast<nanoseconds>(r).count() ); }

    nanoseconds operator *( long r ) const
      { return nanoseconds( tv * r ); }

    nanoseconds operator /( long r ) const
      { return nanoseconds( tv / r ); }

  private:
    tick_type tv;

    friend class microseconds;
    friend class milliseconds;
    friend class seconds;
    friend class minutes;
    friend class hours;
};

class microseconds
{
  public:
    typedef std::tr2::detail::signed_tick_type tick_type;

    static const tick_type ticks_per_second;
    static const tick_type seconds_per_tick;
    static const bool is_subsecond;

    microseconds( long long us = 0LL ) :
        tv( us )
      { }

    tick_type count() const
      { return tv; }

    template <typename RhsDuration>
    microseconds& operator -=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv -= d.tv * factor / 1000LL;
        return *this;
      }


    template <typename RhsDuration>
    microseconds& operator +=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv += d.tv * factor / 1000LL;
        return *this;
      }


    microseconds& operator *=( long v )
      {
        tv *= v;
        return *this;
      }

    microseconds& operator /=( long v )
      {
        tv /= v;
        return *this;
      }

    microseconds operator -() const
      { return microseconds( -tv ); }

    operator nanoseconds() const
      { return nanoseconds(tv * 1000LL); }

    bool operator ==( const microseconds& r ) const
      { return tv == r.tv; }

    template <class Duration>
    bool operator ==( const Duration& r ) const
      { return std::tr2::detail::__op_aux<microseconds,Duration,std::equal_to<tick_type>,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ); }

    bool operator !=( const microseconds& r ) const
      { return tv != r.tv; }

    template <class Duration>
    bool operator !=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<microseconds,Duration,std::not_equal_to<tick_type>,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ); }

    bool operator <( const microseconds& r ) const
      { return tv < r.tv; }

    template <class Duration>
    bool operator <( const Duration& r ) const
      { return std::tr2::detail::__op_aux<microseconds,Duration,std::less<tick_type>,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ); }

    bool operator <=( const microseconds& r ) const
      { return tv <= r.tv; }

    template <class Duration>
    bool operator <=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<microseconds,Duration,std::less_equal<tick_type>,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ); }

    bool operator >( const microseconds& r ) const
      { return tv > r.tv; }

    template <class Duration>
    bool operator >( const Duration& r ) const
      { return std::tr2::detail::__op_aux<microseconds,Duration,std::greater<tick_type>,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ); }

    bool operator >=( const microseconds& r ) const
      { return tv >= r.tv; }

    template <class Duration>
    bool operator >=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<microseconds,Duration,std::greater_equal<tick_type>,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ); }

    microseconds operator +( const microseconds& r ) const
      { return microseconds( tv + r.tv ); }

    system_time operator +( const system_time& r ) const;

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<microseconds,Duration>::finest_type operator +(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<microseconds,Duration>::finest_type(
          std::tr2::detail::__op_aux2<microseconds,Duration,std::tr2::detail::add,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ) );
      }

    microseconds operator -( const microseconds& r ) const
      { return microseconds( tv - r.tv ); }

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<microseconds,Duration>::finest_type operator -(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<microseconds,Duration>::finest_type(
          std::tr2::detail::__op_aux2<microseconds,Duration,std::tr2::detail::sub,std::tr2::detail::__is_more_precise<microseconds,Duration>::value>()( *this, r ) );
      }

    microseconds operator *( long r ) const
      { return microseconds( tv * r ); }

    microseconds operator /( long r ) const
      { return microseconds( tv / r ); }

  private:
    tick_type tv;

    friend class nanoseconds;
    friend class milliseconds;
    friend class seconds;
    friend class minutes;
    friend class hours;
};

class milliseconds
{
  public:
    typedef std::tr2::detail::signed_tick_type tick_type;

    static const tick_type ticks_per_second;
    static const tick_type seconds_per_tick;
    static const bool is_subsecond;

    milliseconds( long long ms = 0LL ) :
        tv( ms )
      { }

    tick_type count() const
      { return tv; }

    template <typename RhsDuration>
    milliseconds& operator -=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv -= d.tv * factor / 1000000LL;
        return *this;
      }


    template <typename RhsDuration>
    milliseconds& operator +=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv += d.tv * factor / 1000000LL;
        return *this;
      }


    milliseconds& operator *=( long v )
      {
        tv *= v;
        return *this;
      }

    milliseconds& operator /=( long v )
      {
        tv /= v;
        return *this;
      }

    milliseconds operator -() const
      { return milliseconds( -tv ); }

    operator nanoseconds() const
      { return nanoseconds(tv * 1000000LL); }

    operator microseconds() const
      { return microseconds(tv * 1000LL); }

    bool operator ==( const milliseconds& r ) const
      { return tv == r.tv; }

    template <class Duration>
    bool operator ==( const Duration& r ) const
      { return std::tr2::detail::__op_aux<milliseconds,Duration,std::equal_to<tick_type>,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ); }

    bool operator !=( const milliseconds& r ) const
      { return tv != r.tv; }

    template <class Duration>
    bool operator !=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<milliseconds,Duration,std::not_equal_to<tick_type>,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ); }

    bool operator <( const milliseconds& r ) const
      { return tv < r.tv; }

    template <class Duration>
    bool operator <( const Duration& r ) const
      { return std::tr2::detail::__op_aux<milliseconds,Duration,std::less<tick_type>,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ); }

    bool operator <=( const milliseconds& r ) const
      { return tv <= r.tv; }

    template <class Duration>
    bool operator <=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<milliseconds,Duration,std::less_equal<tick_type>,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ); }

    bool operator >( const milliseconds& r ) const
      { return tv > r.tv; }

    template <class Duration>
    bool operator >( const Duration& r ) const
      { return std::tr2::detail::__op_aux<milliseconds,Duration,std::greater<tick_type>,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ); }

    bool operator >=( const milliseconds& r ) const
      { return tv >= r.tv; }

    template <class Duration>
    bool operator >=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<milliseconds,Duration,std::greater_equal<tick_type>,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ); }

    milliseconds operator +( const milliseconds& r ) const
      { return milliseconds( tv + r.tv ); }

    system_time operator +( const system_time& r ) const;

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<milliseconds,Duration>::finest_type operator +(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<milliseconds,Duration>::finest_type(
          std::tr2::detail::__op_aux2<milliseconds,Duration,std::tr2::detail::add,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ) );
      }

    milliseconds operator -( const milliseconds& r ) const
      { return milliseconds( tv - r.tv ); }

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<milliseconds,Duration>::finest_type operator -(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<milliseconds,Duration>::finest_type(
          std::tr2::detail::__op_aux2<milliseconds,Duration,std::tr2::detail::sub,std::tr2::detail::__is_more_precise<milliseconds,Duration>::value>()( *this, r ) );
      }

    milliseconds operator *( long r ) const
      { return milliseconds( tv * r ); }

    microseconds operator /( long r ) const
      { return milliseconds( tv / r ); }

  private:
    tick_type tv;

    friend class nanoseconds;
    friend class microseconds;
    friend class seconds;
    friend class minutes;
    friend class hours;
};

class seconds
{
  public:
    typedef std::tr2::detail::signed_tick_type tick_type;

    static const tick_type ticks_per_second;
    static const tick_type seconds_per_tick;
    static const bool is_subsecond;

    seconds( long long s = 0LL ) :
        tv( s )
      { }

    tick_type count() const
      { return tv; }

    template <typename RhsDuration>
    seconds& operator -=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv -= d.tv * factor / 1000000000LL;
        return *this;
      }

    template <typename RhsDuration>
    seconds& operator +=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv += d.tv * factor / 1000000000LL;
        return *this;
      }

    seconds& operator *=( long v )
      {
        tv *= v;
        return *this;
      }

    seconds& operator /=( long v )
      {
        tv /= v;
        return *this;
      }

    seconds operator -() const
     { return seconds( -tv ); }

    operator nanoseconds() const
      { return nanoseconds(tv * 1000000000LL); }

    operator microseconds() const
      { return microseconds(tv * 1000000LL); }

    operator milliseconds() const
      { return milliseconds(tv * 1000LL); }

    bool operator ==( const seconds& r ) const
      { return tv == r.tv; }

    template <class Duration>
    bool operator ==( const Duration& r ) const
      { return std::tr2::detail::__op_aux<seconds,Duration,std::equal_to<tick_type>,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ); }

    bool operator !=( const seconds& r ) const
      { return tv != r.tv; }

    template <class Duration>
    bool operator !=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<seconds,Duration,std::not_equal_to<tick_type>,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ); }

    bool operator <( const seconds& r ) const
      { return tv < r.tv; }

    template <class Duration>
    bool operator <( const Duration& r ) const
      { return std::tr2::detail::__op_aux<seconds,Duration,std::less<tick_type>,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ); }

    bool operator <=( const seconds& r ) const
      { return tv <= r.tv; }

    template <class Duration>
    bool operator <=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<seconds,Duration,std::less_equal<tick_type>,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ); }

    bool operator >( const seconds& r ) const
      { return tv > r.tv; }

    template <class Duration>
    bool operator >( const Duration& r ) const
      { return std::tr2::detail::__op_aux<seconds,Duration,std::greater<tick_type>,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ); }

    bool operator >=( const seconds& r ) const
      { return tv >= r.tv; }

    template <class Duration>
    bool operator >=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<seconds,Duration,std::greater_equal<tick_type>,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ); }

    seconds operator +( const seconds& r ) const
      { return seconds( tv + r.tv ); }

    system_time operator +( const system_time& r ) const;

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<seconds,Duration>::finest_type operator +(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<seconds,Duration>::finest_type(
          std::tr2::detail::__op_aux2<seconds,Duration,std::tr2::detail::add,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ) );
      }

    seconds operator -( const seconds& r ) const
      { return seconds( tv - r.tv ); }

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<seconds,Duration>::finest_type operator -(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<seconds,Duration>::finest_type(
          std::tr2::detail::__op_aux2<seconds,Duration,std::tr2::detail::sub,std::tr2::detail::__is_more_precise<seconds,Duration>::value>()( *this, r ) );
      }

    seconds operator *( long r ) const
      { return seconds( tv * r ); }

    seconds operator /( long r ) const
      { return seconds( tv / r ); }

  private:
    tick_type tv;

    friend class nanoseconds;
    friend class microseconds;
    friend class milliseconds;
    friend class minutes;
    friend class hours;
};

class minutes
{
  public:
    typedef std::tr2::detail::signed_tick_type tick_type;

    static const tick_type ticks_per_second;
    static const tick_type seconds_per_tick;
    static const bool is_subsecond;

    minutes( long long m = 0LL ) :
        tv( m )
      { }

    tick_type count() const
      { return tv; }

    template <typename RhsDuration>
    minutes& operator -=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv -= d.tv * factor / 60000000000LL;
        return *this;
      }

    template <typename RhsDuration>
    minutes& operator +=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv += d.tv * factor / 60000000000LL;
        return *this;
      }


    minutes& operator *=( long v )
      {
        tv *= v;
        return *this;
      }

    minutes& operator /=( long v )
      {
        tv /= v;
        return *this;
      }

    minutes operator-() const
     { return minutes( -tv ); }

    operator nanoseconds() const
      { return nanoseconds(tv * 60000000000LL); }

    operator microseconds() const
      { return microseconds(tv * 60000000LL); }

    operator milliseconds() const
      { return milliseconds(tv * 60000LL); }

    operator seconds() const
      { return seconds(tv * 60LL); }

    bool operator ==( const minutes& r ) const
      { return tv == r.tv; }

    template <class Duration>
    bool operator ==( const Duration& r ) const
      { return std::tr2::detail::__op_aux<minutes,Duration,std::equal_to<tick_type>,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ); }

    bool operator !=( const minutes& r ) const
      { return tv != r.tv; }

    template <class Duration>
    bool operator !=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<minutes,Duration,std::not_equal_to<tick_type>,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ); }

    bool operator <( const minutes& r ) const
      { return tv < r.tv; }

    template <class Duration>
    bool operator <( const Duration& r ) const
      { return std::tr2::detail::__op_aux<minutes,Duration,std::less<tick_type>,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ); }

    bool operator <=( const minutes& r ) const
      { return tv <= r.tv; }

    template <class Duration>
    bool operator <=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<minutes,Duration,std::less_equal<tick_type>,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ); }

    bool operator >( const minutes& r ) const
      { return tv > r.tv; }

    template <class Duration>
    bool operator >( const Duration& r ) const
      { return std::tr2::detail::__op_aux<minutes,Duration,std::greater<tick_type>,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ); }

    bool operator >=( const minutes& r ) const
      { return tv >= r.tv; }

    template <class Duration>
    bool operator >=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<minutes,Duration,std::greater_equal<tick_type>,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ); }

    minutes operator +( const minutes& r ) const
      { return minutes( tv + r.tv ); }

    system_time operator +( const system_time& r ) const;

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<minutes,Duration>::finest_type operator +(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<minutes,Duration>::finest_type(
          std::tr2::detail::__op_aux2<minutes,Duration,std::tr2::detail::add,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ) );
      }

    minutes operator -( const minutes& r ) const
      { return minutes( tv - r.tv ); }

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<minutes,Duration>::finest_type operator -(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<minutes,Duration>::finest_type(
          std::tr2::detail::__op_aux2<minutes,Duration,std::tr2::detail::sub,std::tr2::detail::__is_more_precise<minutes,Duration>::value>()( *this, r ) );
      }

    minutes operator *( long r ) const
      { return minutes( tv * r ); }

    minutes operator /( long r ) const
      { return minutes( tv / r ); }

  private:
    tick_type tv;

    friend class nanoseconds;
    friend class microseconds;
    friend class milliseconds;
    friend class seconds;
    friend class hours;
};

class hours
{
  public:
    typedef std::tr2::detail::signed_tick_type tick_type;

    static const tick_type ticks_per_second;
    static const tick_type seconds_per_tick;
    static const bool is_subsecond;

    hours( long long h = 0LL ) :
        tv( h )
      {  }

    tick_type count() const
      { return tv; }

    template <typename RhsDuration>
    hours& operator -=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv -= d.tv * factor / 3600000000000LL;
        return *this;
      }

    template <typename RhsDuration>
    hours& operator +=( const RhsDuration& d )
      {
        static const tick_type factor = RhsDuration::is_subsecond ? nanoseconds::ticks_per_second / RhsDuration::ticks_per_second : nanoseconds::ticks_per_second * RhsDuration::seconds_per_tick;

        tv += d.tv * factor / 3600000000000LL;
        return *this;
      }

    hours& operator *=( long v )
      {
        tv *= v;
        return *this;
      }

    hours& operator /=( long v )
      {
        tv /= v;
        return *this;
      }

    hours operator -() const
      { return hours( -tv ); }

    operator nanoseconds() const
      { return nanoseconds(tv * 3600000000000LL); }

    operator microseconds() const
      { return microseconds(tv * 3600000000LL); }

    operator milliseconds() const
      { return milliseconds(tv * 3600000LL); }

    operator seconds() const
      { return seconds(tv * 3600LL); }

    operator minutes() const
      { return minutes(tv * 60LL); }

    bool operator ==( const hours& r ) const
      { return tv == r.tv; }

    template <class Duration>
    bool operator ==( const Duration& r ) const
      { return std::tr2::detail::__op_aux<hours,Duration,std::equal_to<tick_type>,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ); }

    bool operator !=( const hours& r ) const
      { return tv != r.tv; }

    template <class Duration>
    bool operator !=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<hours,Duration,std::not_equal_to<tick_type>,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ); }

    bool operator <( const hours& r ) const
      { return tv < r.tv; }

    template <class Duration>
    bool operator <( const Duration& r ) const
      { return std::tr2::detail::__op_aux<hours,Duration,std::less<tick_type>,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ); }

    bool operator <=( const hours& r ) const
      { return tv <= r.tv; }

    template <class Duration>
    bool operator <=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<hours,Duration,std::less_equal<tick_type>,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ); }

    bool operator >( const hours& r ) const
      { return tv > r.tv; }

    template <class Duration>
    bool operator >( const Duration& r ) const
      { return std::tr2::detail::__op_aux<hours,Duration,std::greater<tick_type>,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ); }

    bool operator >=( const hours& r ) const
      { return tv >= r.tv; }

    template <class Duration>
    bool operator >=( const Duration& r ) const
      { return std::tr2::detail::__op_aux<hours,Duration,std::greater_equal<tick_type>,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ); }

    hours operator +( const hours& r ) const
      { return hours( tv + r.tv ); }

    system_time operator +( const system_time& r ) const;

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<hours,Duration>::finest_type operator +(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<hours,Duration>::finest_type(
          std::tr2::detail::__op_aux2<hours,Duration,std::tr2::detail::add,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ) );
      }

    hours operator -( const hours& r ) const
      { return hours( tv - r.tv ); }

    template <class Duration>
    typename std::tr2::detail::__is_more_precise<hours,Duration>::finest_type operator -(const Duration& r) const
      {
        return typename std::tr2::detail::__is_more_precise<hours,Duration>::finest_type(
          std::tr2::detail::__op_aux2<hours,Duration,std::tr2::detail::sub,std::tr2::detail::__is_more_precise<hours,Duration>::value>()( *this, r ) );
      }

    hours operator *( long r ) const
      { return hours( tv * r ); }

    hours operator /( long r ) const
      { return hours( tv / r ); }

  private:
    tick_type tv;

    friend class nanoseconds;
    friend class microseconds;
    friend class milliseconds;
    friend class seconds;
    friend class minutes;
};

system_time get_system_time();

class system_time
{
  private:
    struct _adopt_t {};

  public:
    typedef std::tr2::detail::unsigned_tick_type tick_type;

    static const tick_type ticks_per_second;
    static const tick_type seconds_per_tick;
    static const bool is_subsecond;

    system_time() :
        tv( 0ULL )
      { }
    explicit system_time( time_t t, nanoseconds ns ) :
        tv( t * ticks_per_second + ns.count() )
      { }
    explicit system_time( time_t t ) :
        tv( t * ticks_per_second )
      { }

    time_t seconds_since_epoch() const
      { return static_cast<time_t>( tv / nanoseconds::ticks_per_second ); }

    nanoseconds nanoseconds_since_epoch() const
      { return nanoseconds( tv ); }

    bool operator ==(const system_time& rhs) const
      { return tv == rhs.tv; }

    bool operator !=(const system_time& rhs) const
      { return tv != rhs.tv; }

    bool operator >(const system_time& rhs) const
      { return tv > rhs.tv; }

    bool operator >=(const system_time& rhs) const
      { return tv >= rhs.tv; }

    bool operator <(const system_time& rhs) const
      { return tv < rhs.tv; }

    bool operator <=(const system_time& rhs) const
      { return tv <= rhs.tv; }

    nanoseconds operator -(const system_time& rhs) const
      { return nanoseconds( tv - rhs.tv ); }

    system_time operator +(const nanoseconds& td) const
      { return system_time( tv + td.count(), _adopt_t() ); }

    template <typename Duration>
    system_time operator +(const Duration& td) const
      { return system_time( tv + static_cast<nanoseconds>( td ).count(), _adopt_t() ); }

    system_time& operator +=(const nanoseconds& td)
      {
        tv += td.count();

        return *this;
      }

    template <typename Duration>
    system_time& operator +=(const Duration& td)
      {
        tv += static_cast<nanoseconds>( td ).count();

        return *this;
      }

    system_time operator -(const nanoseconds& td) const
      { return system_time( tv - td.count() ); }

    template <typename Duration>
    system_time operator -(const Duration& td) const
      { return system_time( tv - static_cast<nanoseconds>( td ).count() ); }

    system_time& operator -=(const nanoseconds& td)
      {
        tv -= td.count();

        return *this;
      }

    template <typename Duration>
    system_time& operator -=(const Duration& td)
      {
        tv -= static_cast<nanoseconds>( td ).count();

        return *this;
      }

  private:
    system_time( tick_type _v, const _adopt_t& ) :
        tv( _v ) 
      { }

    tick_type tv;

    friend system_time get_system_time();
};

inline nanoseconds operator *( long lhs, const nanoseconds& rhs )
{ return nanoseconds( rhs.count() * lhs ); }

inline microseconds operator *( long lhs, const microseconds& rhs )
{ return microseconds( rhs.count() * lhs ); }

inline milliseconds operator *( long lhs, const milliseconds& rhs )
{ return milliseconds( rhs.count() * lhs ); }

inline seconds operator *( long lhs, const seconds& rhs )
{ return seconds( rhs.count() * lhs ); }

inline minutes operator *( long lhs, const minutes& rhs )
{ return minutes( rhs.count() * lhs ); }

inline hours operator *( long lhs, const hours& rhs )
{ return hours( rhs.count() * lhs ); }

} // namespace tr2

} // namespace std

#endif // __MT_DATE_TIME
