// -*- C++ -*- Time-stamp: <08/09/08 23:26:16 ptr>

/*
 * Copyright (c) 1997-1999, 2002-2008
 * Petr Ovtchenkov
 *
 * Portion Copyright (c) 1999-2001
 * Parallel Graphics Ltd.
 *
 * Licensed under the Academic Free License version 3.0
 *
 * Derived from original <mt/xmt.h> of 'complement' project
 * [http://complement.sourceforge.net]
 * to make it close to JTC1/SC22/WG21 C++ 0x working draft
 * [http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2008/n2521.pdf]
 */

#ifndef __MUTEX_H
#define __MUTEX_H

#ifndef __config_feature_h
#include <config/feature.h>
#endif

#include <cstddef>
#include <stdexcept>

#ifdef WIN32
# include <windows.h>
# include <memory>
# include <limits>
# define ETIME   62      /* timer expired */
# pragma warning( disable : 4290)
#endif // WIN32

#ifdef __unix
# include <pthread.h>
# include <sched.h>
#endif // __unix

#include <cerrno>
#include <mt/system_error>

namespace std {

namespace tr2 {

class lock_error :
        public std::exception
{
  private:
    int r_;

  public:

    explicit lock_error( int r ) :
        r_( r )
      { }

    virtual char const *what() throw()
      { return "std::lock_error"; }

    int error() const
      { return r_; }
};

namespace detail {

#ifdef __FIT_PSHARED_MUTEX
extern std::string _notpshared;
#endif

#ifdef __FIT_XSI_THR
extern std::string _notrecursive;
#endif

} // namespace detail

template <bool SCOPE> class __condition_variable;
template <bool SCOPE> class __condition_variable_any;
template <bool SCOPE> class __condition_event;

// if parameter SCOPE (process scope) true, PTHREAD_PROCESS_SHARED will
// be used; otherwise PTHREAD_PROCESS_PRIVATE.
// Of cause, system must support process scope...
// Linux at 2003-01-19 NOT SUPPORT PTHREAD_PROCESS_SHARED mutex!
// And Windows too!
// 
template <bool RECURSIVE_SAFE, bool SCOPE>
class __mutex_base
{
  public:
    __mutex_base()
      {
#ifdef __FIT_PTHREADS
        if ( SCOPE || RECURSIVE_SAFE ) {
          pthread_mutexattr_t att;
          pthread_mutexattr_init( &att );
# ifdef __FIT_PSHARED_MUTEX
          if ( SCOPE ) {
            int ret = pthread_mutexattr_setpshared( &att, PTHREAD_PROCESS_SHARED );
            if ( ret != 0 ) {
              throw std::system_error( ret, std::get_posix_category(), detail::_notpshared );
            }
          }
# endif // __FIT_PSHARED_MUTEX
# ifdef __FIT_XSI_THR  // Unix 98 or X/Open System Interfaces Extention
          if ( RECURSIVE_SAFE ) {
            int ret = pthread_mutexattr_settype( &att, PTHREAD_MUTEX_RECURSIVE );
            if ( ret != 0 ) {
              throw std::system_error( ret, std::get_posix_category(), detail::_notrecursive );
            }
          }
# endif
          pthread_mutex_init( &_M_lock, &att );
          pthread_mutexattr_destroy( &att );
        } else {
          pthread_mutex_init( &_M_lock, 0 );
        }
#endif // _PTHREADS
#ifdef __FIT_WIN32THREADS
        InitializeCriticalSection( &_M_lock );
#endif
      }

    ~__mutex_base()
      {
#ifdef __FIT_PTHREADS
        pthread_mutex_destroy( &_M_lock );
#endif
#ifdef WIN32
        DeleteCriticalSection( &_M_lock );
#endif
      }

#ifdef __FIT_PTHREADS
    typedef pthread_mutex_t* native_handle_type;
#endif
#ifdef __FIT_WIN32THREADS
    typedef CRITICAL_SECTION* native_handle_type;
#endif

    native_handle_type native_handle()
      { return &_M_lock; }

  private:
    __mutex_base( const __mutex_base& )
      { }

  protected:
#ifdef __FIT_PTHREADS
    pthread_mutex_t _M_lock;
#endif
#ifdef __FIT_WIN32THREADS
    CRITICAL_SECTION _M_lock;
#endif

#ifndef __FIT_WIN32THREADS
  private:
    friend class __condition_variable<SCOPE>;
    friend class __condition_event<SCOPE>;
#endif
};

#ifdef __FIT_PTHREAD_SPINLOCK

// The IEEE Std. 1003.1j-2000 introduces functions to implement spinlocks.
template <bool SCOPE>
class __spinlock_base
{
  public:
    __spinlock_base()
      {
#ifdef __FIT_PTHREADS
        pthread_spin_init( &_M_lock, SCOPE ? 1 : 0 );
#endif // _PTHREADS
      }

    ~__spinlock_base()
      {
#ifdef __FIT_PTHREADS
        pthread_spin_destroy( &_M_lock );
#endif
      }

#ifdef __FIT_PTHREADS
    typedef pthread_spinlock_t* native_handle_type;
#endif

    native_handle_type native_handle()
      { return &_M_lock; }

  protected:
#ifdef __FIT_PTHREADS
    pthread_spinlock_t _M_lock;
#endif
};

#endif // __FIT_PTHREAD_SPINLOCK

// Portable mutex implementation. If the parameter RECURSIVE_SAFE
// is true, mutex will be recursive safe (detect deadlock).
// If RECURSIVE_SAFE is false, implementation may not to be
// recursive-safe.
// The SCOPE parameter designate mutex scope---shared between
// processes (true), or only inside threads of one process (false).
// Note, that not all OS support interprocess mutex scope
// (for example, Windows and Linux).
template <bool RECURSIVE_SAFE, bool SCOPE>
class __mutex :
    public __mutex_base<RECURSIVE_SAFE,SCOPE>
{
  public:
    __mutex()
      { }

    ~__mutex()
      { }

    void lock()
      {
#ifdef __FIT_PTHREADS
        int e = pthread_mutex_lock( &this->_M_lock );
        if ( e ) {
          throw std::system_error( e, std::get_posix_category() );
        }
#endif
#ifdef __FIT_WIN32THREADS
        EnterCriticalSection( &this->_M_lock );
#endif
      }

#if !defined( WIN32 ) || (defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x0400)
    bool try_lock()
      {
#ifdef __FIT_PTHREADS
        int r = pthread_mutex_trylock( &this->_M_lock );
        if ( r != 0 ) {
          if ( r == EBUSY ) {
            return false;
          }

          throw std::tr2::lock_error( r );
        }

        return true;
#endif
#ifdef __FIT_WIN32THREADS
        return TryEnterCriticalSection( &this->_M_lock ) != 0;
#endif
      }
#endif // !WIN32 || _WIN32_WINNT >= 0x0400

    void unlock()
      {
#ifdef __FIT_PTHREADS
        pthread_mutex_unlock( &this->_M_lock );
#endif
#ifdef __FIT_WIN32THREADS
        LeaveCriticalSection( &this->_M_lock );
#endif
      }

  private:
    __mutex( const __mutex& )
      { }

#ifndef __FIT_WIN32THREADS
  private:
    friend class __condition_variable<SCOPE>;
    friend class __condition_event<SCOPE>;
#endif
};

#ifdef __FIT_PTHREAD_SPINLOCK
// Spinlock-based locks (IEEE Std. 1003.1j-2000)

template <bool RS, bool SCOPE> class __spinlock;

template <bool SCOPE>
class __spinlock<false,SCOPE> :
    public __spinlock_base<SCOPE>
{
  public:
    __spinlock()
      { }

    ~__spinlock()
      { }

    void lock()
      {
# ifdef __FIT_PTHREADS
        pthread_spin_lock( &this->_M_lock );
# endif
      }

    bool try_lock()
      {
# ifdef __FIT_PTHREADS
        int r = pthread_spin_trylock( &this->_M_lock );
        if ( r != 0 ) {
          if ( r == EBUSY ) {
            return false;
          }

          throw std::tr2::lock_error( r );
        }

        return true;
# endif
      }

    void unlock()
      {
# ifdef __FIT_PTHREADS
        pthread_spin_unlock( &this->_M_lock );
# endif
      }

  private:
    __spinlock( const __spinlock& )
      { }

};

template <bool SCOPE>
class __spinlock<true,SCOPE> : //  Recursive safe
    public __spinlock_base<SCOPE>
{
  public:
    __spinlock()
      { }

    ~__spinlock()
      { }

    void lock()
      {
#  ifdef __FIT_PTHREADS
        pthread_t _c_id = pthread_self();
#  endif
        if ( _c_id == _id ) {
          ++_count;
          return;
        }
#  ifdef __FIT_PTHREADS
        pthread_spin_lock( &this->_M_lock );
#  endif
        _id = _c_id;
        _count = 0;
      }

    bool try_lock()
      {
#  ifdef __FIT_PTHREADS
        pthread_t _c_id = pthread_self();
#  endif
        if ( _c_id == _id ) {
          ++_count;
          return true;
        }
#  ifdef __FIT_PTHREADS
        int res = pthread_spin_trylock( &this->_M_lock );
#  endif
        if ( res != 0 ) {
          if ( res == EBUSY ) {
            return false;
          }

          throw std::tr2::lock_error( res );
        }

        _id = _c_id;
        _count = 0;

        return true;
      }

    void unlock()
      {
        if ( --_count == 0 ) {
#  ifdef __FIT_PTHREADS
          _id =  static_cast<pthread_t>(-1);
          pthread_spin_unlock( &this->_M_lock );
#  endif
        }
      }
  protected:
    unsigned _count;

# ifdef __FIT_PTHREADS
    pthread_t _id;
# endif

  private:
    __spinlock( const __spinlock& )
      { }
};
#endif // __FIT_PTHREAD_SPINLOCK

// Recursive Safe mutex.

// This specialization need for POSIX and DCE threads,
// because Windows CriticalSection is recursive safe.
// By the way, point for enhancement:  __UNIX_98
// (or XSI---X/Open System Interfaces Extention) has recursive mutex option.
// Another specialization?

#if (defined(__unix) && !defined(__FIT_XSI_THR))

// This specialization need for old POSIX and DCE threads,
// before XSI (X/Open System Interfaces Extention) or Unix 98.
// because Windows CriticalSection is recursive safe, and
// XSI implementation has appropriate mutex parameter (see
// __mutex_base above).

template <bool SCOPE>
class __mutex<true,SCOPE> : // Recursive Safe
    public __mutex_base<true,SCOPE>
{
  public:
    __mutex() :
        _count( 0 ),
# ifdef __FIT_PTHREADS
        _id( __STATIC_CAST(pthread_t,-1) )
# endif
      { }

    ~__mutex()
      { }

    void lock()
      {
#  ifdef __FIT_PTHREADS
        pthread_t _c_id = pthread_self();
#  endif
        if ( _c_id == _id ) {
          ++_count;
          return;
        }
#  ifdef __FIT_PTHREADS
        pthread_mutex_lock( &_M_lock );
#  endif
        _id = _c_id;
        _count = 0;
      }

    // Equivalent to lock(), except that if the mutex object referenced
    // by mutex is currently locked the call return immediately.
    // If mutex is currently owned by the calling thread, the mutex lock count
    // incremented by one and the try_lock() function immediately return success
    // (value 0). Otherwise, if mutex is currently owned by another thread,
    // return error (non-zero).

    bool try_lock()
      {
#  ifdef __FIT_PTHREADS
        pthread_t _c_id = pthread_self();
#  endif
        if ( _c_id == _id ) {
          ++_count;
          return true;
        }
#  ifdef __FIT_PTHREADS
        int res = pthread_mutex_trylock( &_M_lock );
#  endif
        if ( res != 0 ) {
          if ( res == EBUSY ) {
            return false;
          }

          throw std::tr2::lock_error( res );
        }

        _id = _c_id;
        _count = 0;

        return true;
      }

    void unlock()
      {
        if ( --_count == 0 ) {
#  ifdef __FIT_PTHREADS
          _id =  __STATIC_CAST(pthread_t,-1);
          pthread_mutex_unlock( &_M_lock );
#  endif
        }
      }

  private:
    __mutex( const __mutex& )
      { }

  protected:
    unsigned _count;

# ifdef __FIT_PTHREADS
    pthread_t _id;
# endif
};
#endif // __unix && !__FIT_XSI_THR

#ifdef __FIT_RWLOCK
// Read-write mutex: IEEE Std 1003.1, 2001, 2004 Editions

template <bool SCOPE>
class __rw_mutex_base
{
  public:
    __rw_mutex_base()
      {
#ifdef __FIT_PTHREADS
        if ( SCOPE ) {
          pthread_rwlockattr_t att;
          pthread_rwlockattr_init( &att );
# ifdef __FIT_PSHARED_MUTEX
          int ret = pthread_rwlockattr_setpshared( &att, PTHREAD_PROCESS_SHARED );
          if ( ret != 0 ) {
            throw std::system_error( ret, std::get_posix_category(), std::tr2::detail::_notpshared );
          }
# endif // __FIT_PSHARED_MUTEX
          pthread_rwlock_init( &_M_lock, &att );
          pthread_rwlockattr_destroy( &att );
        } else {
          pthread_rwlock_init( &_M_lock, 0 );
        }
#endif // _PTHREADS
#ifdef __FIT_WIN32THREADS
#error Fix me!
        InitializeCriticalSection( &_M_lock );
#endif
      }

    ~__rw_mutex_base()
      {
#ifdef _PTHREADS
        pthread_rwlock_destroy( &_M_lock );
#endif
#ifdef WIN32
#error Fix me!
        DeleteCriticalSection( &_M_lock );
#endif
      }

  private:
    __rw_mutex_base( const __rw_mutex_base& )
      { }

  protected:
#ifdef _PTHREADS
    pthread_rwlock_t _M_lock;
#endif
#ifdef __FIT_WIN32THREADS
#error Fix me!
    CRITICAL_SECTION _M_lock;
#endif
};

template <bool SCOPE>
class __rw_mutex :
    public __rw_mutex_base<SCOPE>
{
  public:
    __rw_mutex()
      { }

    ~__rw_mutex()
      { }

    void rdlock()
      {
#ifdef __FIT_PTHREADS
        pthread_rwlock_rdlock( &this->_M_lock );
#endif
#ifdef __FIT_WIN32THREADS
#error Fix me!
        EnterCriticalSection( &this->_M_lock );
#endif
      }

    void lock()
      {
#ifdef _PTHREADS
        pthread_rwlock_wrlock( &this->_M_lock );
#endif
#ifdef __FIT_WIN32THREADS
#error Fix me!
        EnterCriticalSection( &this->_M_lock );
#endif
      }

#if !defined( WIN32 ) || (defined(_WIN32_WINNT) && _WIN32_WINNT >= 0x0400)
    bool try_rdlock()
      {
#ifdef __FIT_PTHREADS
        int res = pthread_rwlock_tryrdlock( &this->_M_lock );
        if ( res != 0 ) {
          if ( res == EBUSY ) {
            return false;
          }
          throw std::tr2::lock_error( res );
        }
        return true;
#endif
#ifdef __FIT_WIN32THREADS
#error Fix me!
        return TryEnterCriticalSection( &this->_M_lock ) != 0 ? 0 : -1;
#endif
      }

    bool try_lock()
      {
#ifdef __FIT_PTHREADS
        int res = pthread_rwlock_trywrlock( &this->_M_lock );
        if ( res != 0 ) {
          if ( res == EBUSY ) {
            return false;
          }
          throw std::tr2::lock_error( res );
        }
        return true;
#endif
#ifdef __FIT_WIN32THREADS
#error Fix me!
        return TryEnterCriticalSection( &this->_M_lock ) != 0 ? 0 : -1;
#endif
      }

#endif // !WIN32 || _WIN32_WINNT >= 0x0400

    void unlock()
      {
#ifdef _PTHREADS
        pthread_rwlock_unlock( &this->_M_lock );
#endif
#ifdef __FIT_WIN32THREADS
#error Fix me!
        LeaveCriticalSection( &this->_M_lock );
#endif
      }

  private:
    __rw_mutex( const __rw_mutex& )
      { }
};

#endif // __FIT_RWLOCK

struct defer_lock_t
{ };
struct try_to_lock_t
{ };
struct adopt_lock_t
{ };

extern defer_lock_t defer_lock;
extern try_to_lock_t try_to_lock;
extern adopt_lock_t adopt_lock;

template <class M>
class lock_guard // scoped_lock
{
  public:
    typedef M mutex_type;

    explicit lock_guard( const M& point ) :
        m( point )
      { const_cast<M&>(m).lock(); }
    lock_guard( const M& point, adopt_lock_t ) :
        m( point )
      { }
    ~lock_guard()
      { const_cast<M&>(m).unlock(); }

  private:
    lock_guard( const lock_guard& )
      { }
    lock_guard& operator =( const lock_guard& )
      { return *this; }

    const M& m;
};

template <class M>
class unique_lock
{
  public:
    typedef M mutex_type;

    unique_lock() :
        m( 0 ),
        lk( false )
      { }
    explicit unique_lock( const M& point ) :
        m( &point ),
        lk( true )
      { const_cast<M*>(m)->lock(); }
    unique_lock( const M& point, adopt_lock_t ) :
        m( &point ),
        lk( true )
      { }
    unique_lock( const M& point, defer_lock_t ) :
        m( &point ),
        lk( false )
      { }
    unique_lock( const M& point, try_to_lock_t ) :
        m( &point ),
        lk( false )
      { try_lock(); }
    ~unique_lock()
      { if ( lk ) const_cast<M*>(m)->unlock(); }

    void lock()
      {
        const_cast<M*>(m)->lock();
        if ( lk ) {
          const_cast<M*>(m)->unlock();
          throw std::tr2::lock_error( 0 );
        }
        lk = true;
      }

    bool try_lock()
      {
        if ( const_cast<M*>(m)->try_lock() ) {          
          if ( lk ) {
            const_cast<M*>(m)->unlock();
            throw std::tr2::lock_error( 0 );
          }
          lk = true;
          return true;
        }
        return false;
      }

    void unlock()
      {
        if ( !lk ) {
          throw std::tr2::lock_error( 0 );
        }
        lk = false;
        const_cast<M*>(m)->unlock();
      }

    bool owns_lock() const
      {
        if ( m == 0 ) {
          return false;
        }
        if ( const_cast<M*>(m)->try_lock() ) {
          const_cast<M*>(m)->unlock();
        } else if ( lk ) {
          return true;
        }

        return false;
      }

    operator bool() const
      { return owns_lock(); }

    mutex_type* mutex() const
      { return m; }

    mutex_type* release()
      {
        M *tmp = const_cast<M*>(m);
        const_cast<M*>(m) = 0;
        lk = false;
        return tmp;
      }

  private:
    unique_lock( const unique_lock& )
      { }
    unique_lock& operator =( const unique_lock& )
      { return *this; }

#if defined(__GNUC__) && (__GNUC__ < 4)
  public:
#endif
    const M* m;
#if defined(__GNUC__) && (__GNUC__ < 4)
  private:
#endif
    bool lk;
    friend class __condition_variable<true>;
    friend class __condition_variable<false>;
};

#ifdef __FIT_RWLOCK
template <class M>
class basic_read_lock
{
  public:
    typedef M mutex_type;

    basic_read_lock( const M& point, bool initially_locked = true ) :
        m( point ),
        lk( false )
      { if ( initially_locked ) lock(); }
    ~basic_read_lock()
      { if ( lk ) const_cast<M&>(m).unlock(); }

    void lock()
      {
        const_cast<M&>(m).rdlock();
        if ( lk ) {
          const_cast<M&>(m).unlock();
          throw std::tr2::lock_error( 0 );
        }
        lk = true;
      }

    void unlock()
      {
        if ( !lk ) {
          throw std::tr2::lock_error( 0 );
        }
        lk = false;
        const_cast<M&>(m).unlock();
      }

  private:
    basic_read_lock( const basic_read_lock& )
      { }
    basic_read_lock& operator =( const basic_read_lock& )
      { return *this; }

    const M& m;
    bool lk;
};
#endif // __FIT_RWLOCK

typedef __mutex<false,false>  mutex;
typedef __mutex<true,false>   recursive_mutex;
typedef __mutex<false,true>   mutex_ip;
typedef __mutex<true,true>    recursive_mutex_ip;
#ifdef __FIT_RWLOCK
typedef __rw_mutex<false>     rw_mutex;
typedef __rw_mutex<true>      rw_mutex_ip;
#endif // __FIT_RWLOCK
#ifdef __FIT_PTHREAD_SPINLOCK
typedef __spinlock<false,false> spinlock;
typedef __spinlock<true,false>  recursive_spinlock;
#endif // __FIT_RWLOCK

typedef lock_guard<mutex>           scoped_lock;
typedef lock_guard<recursive_mutex> recursive_scoped_lock;
#ifdef __FIT_RWLOCK
typedef basic_read_lock<__rw_mutex<false> >  rd_scoped_lock;
typedef lock_guard<__rw_mutex<false> >       wr_scoped_lock;
#endif // __FIT_RWLOCK
#ifdef __FIT_PTHREAD_SPINLOCK
typedef lock_guard<spinlock>            spin_scoped_lock;
typedef lock_guard<recursive_spinlock>  recursive_spin_scoped_lock;
#endif // __FIT_RWLOCK

class native_scoped_lock
{
  public:
#ifdef __FIT_PTHREADS
    typedef pthread_mutex_t mutex_type;
#endif
#ifdef __FIT_WIN32THREADS
    typedef CRITICAL_SECTION mutex_type;
#endif

    explicit native_scoped_lock( const mutex_type& m ) :
        _M_lock( m )
      {
#ifdef __FIT_PTHREADS
        pthread_mutex_lock( const_cast<mutex_type *>(&_M_lock) );
#endif
#ifdef __FIT_WIN32THREADS
        EnterCriticalSection( const_cast<mutex_type *>(&_M_lock) );
#endif
      }

    ~native_scoped_lock()
      {
#ifdef __FIT_PTHREADS
        pthread_mutex_unlock( const_cast<mutex_type *>(&_M_lock) );
#endif
#ifdef __FIT_WIN32THREADS
        LeaveCriticalSection( const_cast<mutex_type *>(&_M_lock) );
#endif
      }

  private:
    native_scoped_lock( const native_scoped_lock& m ) :
        _M_lock( m._M_lock )
      { }
    const mutex_type& _M_lock;
};

} // namespace tr2

} // namespace std

#endif /* __MUTEX_H */
