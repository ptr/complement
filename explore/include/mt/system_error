// -*- C++ -*- Time-stamp: <08/02/24 13:19:17 ptr>

/*
 * Copyright (c) 2007-2008
 * Petr Ovtchenkov
 *
 * Licensed under the Academic Free License version 3.0
 *
 * Based on JTC1/SC22/WG21 C++ 0x working draft;
 *
 * This is revision 2 of <system_error>:
 * http://www.open-std.org/jtc1/sc22/WG21/docs/papers/2007/n2303.html
 */

#ifndef __SYSTEM_ERROR
#define __SYSTEM_ERROR

#include <locale>
#include <string>
#include <stdexcept>

namespace std
{

struct error_catalog
{
    typedef int value_type;

    static const value_type address_family_not_supported;
    static const value_type address_in_use;
    static const value_type address_not_available;
    static const value_type already_connected;
    static const value_type argument_list_too_long;
    static const value_type argument_out_of_domain;
    static const value_type bad_address;
    static const value_type bad_file_descriptor;
    static const value_type bad_message;
    static const value_type broken_pipe;
    static const value_type connection_aborted;
    static const value_type connection_refused;
    static const value_type connection_reset;
    static const value_type cross_device_link;
    static const value_type destination_address_required;
    static const value_type device_or_resource_busy;
    static const value_type directory_not_empty;
    static const value_type executable_format_error;
    static const value_type file_exists;
    static const value_type file_too_large;
    static const value_type filename_too_long;
    static const value_type function_not_supported;
    static const value_type host_unreachable;
    static const value_type identifier_removed;
    static const value_type illegal_byte_sequence;
    static const value_type inappropriate_io_control_operation;
    static const value_type interrupted;
    static const value_type invalid_argument;
    static const value_type invalid_seek;
    static const value_type io_error;
    static const value_type is_a_directory;
    static const value_type message_too_long;
    static const value_type network_down;
    static const value_type network_reset;
    static const value_type network_unreachable;
    static const value_type no_buffer_space;
    static const value_type no_child_process;
    static const value_type no_link;
    static const value_type no_lock_available;
    static const value_type no_message_available;
    static const value_type no_message;
    static const value_type no_space_on_device;
    static const value_type no_stream_resources;
    static const value_type no_such_device_or_address;
    static const value_type no_such_device;
    static const value_type no_such_file_or_directory;
    static const value_type no_such_process;
    static const value_type not_a_directory;
    static const value_type not_a_socket;
    static const value_type not_a_stream;
    static const value_type not_connected;
    static const value_type not_enough_memory;
    static const value_type not_supported;
    static const value_type operation_already_in_progress;
    static const value_type operation_canceled;
    static const value_type operation_in_progress;
    static const value_type operation_not_permitted;
    static const value_type operation_not_supported;
    static const value_type owner_dead;
    static const value_type permission_denied;
    static const value_type protocol_error;
    static const value_type protocol_not_available;
    static const value_type protocol_not_supported;
    static const value_type read_only_file_system;
    static const value_type resource_deadlock_would_occur;
    static const value_type result_out_of_range;
    static const value_type state_not_recoverable;
    static const value_type stream_timeout;
    static const value_type text_file_busy;
    static const value_type timed_out;
    static const value_type too_many_files_open_in_system;
    static const value_type too_many_files_open;
    static const value_type too_many_links;
    static const value_type too_many_synbolic_link_levels;
    static const value_type try_again;
    static const value_type value_too_large;
    static const value_type wrong_protocol_type;

    virtual const value_type last_value() const throw();

    virtual bool is_valid_value(value_type) const throw();

    virtual const char* str(value_type) const throw();

    const locale& getloc() const throw()
      { return _M_loc; }

    error_catalog(const locale& __loc = locale::classic()) throw() :
        _M_loc( __loc )
      { }

    error_catalog(const char* __name) :
        _M_loc( __name )
      { }

    virtual ~error_catalog() throw()
      { }

    bool operator ==(const error_catalog& __other) const throw();
    bool operator !=(const error_catalog& __other) const throw();

  private:
    const locale _M_loc;
};

class system_error :
        public std::runtime_error
{
  public:
    system_error( const std::string& );
    system_error( error_catalog::value_type, const error_catalog& );
};

} // namespace std

#endif // __SYSTEM_ERROR
